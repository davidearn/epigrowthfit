% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/confint.R
\name{confint.egf}
\alias{confint.egf}
\title{Confidence intervals on fitted values}
\usage{
\method{confint}{egf}(
  object,
  parm,
  level = 0.95,
  par = get_par_names(object, link = TRUE),
  subset = NULL,
  append = NULL,
  link = TRUE,
  method = c("wald", "profile", "uniroot"),
  grid_len = 12,
  max_width = 7,
  trace = TRUE,
  breaks = NULL,
  probs = NULL,
  parallel = c("serial", "multicore", "snow"),
  cores = getOption("egf.cores", 2L),
  outfile = NULL,
  cl = NULL,
  .subset = NULL,
  .append = NULL,
  ...
)
}
\arguments{
\item{object}{An \code{"egf"} object returned by \code{\link[=egf]{egf()}}.}

\item{parm}{Unused argument included for generic consistency.}

\item{level}{A number in the interval (0,1). The desired confidence level.}

\item{par}{A subset of \code{get_par_names(object, link = TRUE)} naming nonlinear
model parameters for which confidence intervals should be computed.
If \code{object$curve \%in\% c("exponential", "logistic", "richards")},
then \code{par} may also contain \code{"R0"} and \code{"tdoubling"}.}

\item{subset}{An expression to be evaluated in the combined model frame.
Must evaluate to a logical vector or list of logical vectors
indexing rows of the model frame, and thus fitting windows.
Confidence intervals are computed only for the indexed
fitting windows. The default (\code{NULL}) is to consider all
fitting windows.}

\item{append}{An expression indicating variables in the combined model frame
to be included with the result. The default (\code{NULL}) is to append
nothing.}

\item{link}{A logical scalar. If \code{FALSE}, then confidence intervals
on inverse link-transformed fitted values are returned.}

\item{method}{A character string indicating how confidence intervals
should be calculated (see Details).}

\item{grid_len}{(For \code{method = "profile"}.)
A positive integer. Step sizes chosen adaptively by
\code{\link[TMB:tmbprofile]{TMB::tmbprofile()}} will generate approximately this
many points on each side of a profile's minimum point.}

\item{max_width}{(For \code{method = "uniroot"}.)
A positive number. \code{\link[TMB:tmbroot]{TMB::tmbroot()}} will search for roots
in the interval from \code{x-max_width} to \code{x+max_width}, where
\code{x} is the fitted value (link scale).}

\item{trace}{(For \code{method != "wald"}.)
A logical scalar. If \code{TRUE}, then basic tracing messages
are printed.}

\item{breaks, probs}{(For \code{parm = "R0"}.)
Arguments to \code{compute_R0()}.}

\item{parallel}{A character string indicating a library for parallel computation.
\code{"serial"} indicates no parallelization. \code{"multicore"} forks and
is intended for use from a terminal rather than, e.g., RStudio.
On Windows, it is equivalent to \code{"serial"}. \code{"snow"} creates
socket clusters and parallelizes on both Unix-alikes and Windows.}

\item{cores}{A positive integer. The number of worker processes spawned when
\code{parallel != "serial"}. See also \code{\link[parallel:detectCores]{parallel::detectCores()}}.}

\item{outfile}{A character string containing a file path or otherwise \code{NULL}.
If a file path, then console output is diverted there. If \code{NULL},
then there is no diversion. When \code{parallel = "snow"}, diversion
may be necessary to view output.}

\item{cl}{A optional socket cluster created by
\code{\link[parallel:makeCluster]{parallel::makePSOCKcluster()}}, to be used
when \code{parallel = "snow"}. If non-\code{NULL},
then \code{cores} and \code{outfile} are ignored.}

\item{.subset}{A logical vector, to be used (if non-\code{NULL}) in place
of the result of evaluating \code{subset}.}

\item{.append}{A character vector listing variable names, to be used
(if non-\code{NULL}) in place of the result of evaluating \code{append}.}

\item{...}{Unused optional arguments.}
}
\value{
A data frame inheriting from class \code{"egf_confint"},
with variables:
\item{\code{par}}{
Nonlinear model parameter,
from \code{get_par_names(object, link = TRUE)}.
}
\item{\code{ts}}{
Time series, from \code{levels(object$endpoints$window)}.
}
\item{\code{window}}{
Fitting window, from \code{levels(object$endpoints$window)}.
}
\item{\code{estimate}, \code{lower}, \code{upper}}{
Fitted value and approximate lower and upper confidence limits.
}
\code{level} and \code{object$endpoints} are retained as attributes.
}
\description{
Computes confidence intervals on fitted values (see \code{\link[=fitted.egf]{fitted.egf()}})
of nonlinear model parameters and, where appropriate,
the basic reproduction number and initial doubling time (in days).
}
\details{
Three methods are provided for calculating confidence intervals:
\describe{
\item{\code{wald}}{
See \code{\link[=fitted.egf]{fitted.egf()}} and \code{\link[=confint.egf_fitted]{confint.egf_fitted()}}.
}
\item{\code{profile}}{
See \code{\link[=profile.egf]{profile.egf()}} and \code{\link[=confint.egf_profile]{confint.egf_profile()}}.
}
\item{\code{uniroot}}{
Similar to \code{"profile"}, except that the two solutions of
\code{deviance(value) = qchisq(level, df = 1)} are approximated
by root-finding using \code{\link[TMB:tmbroot]{TMB::tmbroot()}} (\code{\link[stats:uniroot]{stats::uniroot()}}
internally).
}
}
For nonlinear model parameters following random effects models,
\code{"wald"} returns confidence intervals on individual fitted values,
whereas \code{"profile"} and \code{"uniroot"} return confidence intervals
on the fixed effects components only, namely the population fitted
values.

\code{"wald"} requires minimal computation time but assumes, e.g.,
asymptotic normality of the maximum likelihood estimator.
A further limitation of \code{"wald"} is functional non-invariance.
\code{"profile"} and \code{"uniroot"} avoid these issues but are much
slower, requiring estimation of restricted models. Of the two,
\code{"profile"} is more robust.
}
\section{Nonstandard evaluation}{
\code{subset} and \code{append} are evaluated in a nonstandard way
to make interactive use more convenient. They are handled
much like the \code{\link[=subset]{subset()}} arguments \code{subset} and \code{select}.
To avoid unexpected behaviour, especially when programming,
use \code{.subset} and \code{.append}.
}

\section{Warning}{
The combined model frame is
\code{do.call(cbind, unname(object$frame_par))}.
If a variable occurs more than once there, because it appears
in multiple model frames, then only the earliest instance is
retained. Except in unusual cases, all instances of a variable
are identical, and no information is lost.
}

\seealso{
\code{\link[=plot.egf_confint]{plot.egf_confint()}}
}
