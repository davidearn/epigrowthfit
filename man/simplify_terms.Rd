% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_formula.R
\name{simplify_terms}
\alias{simplify_terms}
\title{Expand and simplify formula terms}
\usage{
simplify_terms(x)
}
\arguments{
\item{x}{A \link{call} (possibly a \link{formula}), \link{name},
or \link{atomic} scalar.}
}
\value{
The \code{call}, \link{name}, or \link{atomic} scalar resulting from
expansion and simplification of the constituent terms of \code{x}.
}
\description{
Expands and simplifies nested \link{call}s to binary operators
\code{`+`} and \code{`-`} using \code{\link{terms}(simplify = TRUE)}
machinery. Rules outlined under \code{\link{formula}} are extended
to address handling of calls to binary operator \code{`|`}.
}
\details{
\code{x} is split into a \link{list} of constituent terms.
Terms that _are not_ \link{call}s to \code{`|`} are regrouped,
and the resulting expression is expanded and simplified
using \code{\link{terms}(simplify = TRUE)}.
Terms that _are_ \link{call}s to ```|``` are regrouped,
and the resulting expression is expanded and simplified
following extended rules (see below).
Finally, the two expressions are merged, yielding the final result.

For example, consider the expression \code{w + (x * y | f) + (z | f/g)}.
The first component of the final result is simply \code{w}.
The second component is obtained from the subexpression
\code{(x * y | f) + (z | f/g)}.
First, the arguments of each \link{call} to \code{`|`} are
expanded and simplified using \code{\link{terms}(simplify = TRUE)},
producing \code{(x + y + x:y | f) + (z | f + f:g)}.
Second, left hand expressions are distributed to right hand terms,
producing \code{(x + y + x:y | f) + (z | f) + (z | f:g)}.
Third, left hand expressions with matching right hand terms are merged,
producing \code{(x + y + x:y + z | f) + (z | f:g)}.
Finally, left hand expressions are simplified,
again using \code{\link{terms}(simplify = TRUE)},
producing \code{(x + y + z + x:y | f) + (z | f:g)}.
(In this case, the effect is merely a permutation of terms
according to their order.) Hence the final result is
\code{w + (x + y + z + x:y | f) + (z | f:g)}.

If \code{x} is a \link{formula}, then the left and right hand
expressions are expanded and simplified separately.
}
\examples{
## simplify_terms(~0 + x * y - y)
## simplify_terms(~0 + x * y - y + (1 | f/g))
## simplify_terms(~0 + x * y - y + (1 | f/g) + (a | f) + (0 + b | f:g))

}
\keyword{internal}
