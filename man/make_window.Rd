% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/egf_utils.R
\name{make_window}
\alias{make_window}
\alias{make_wave}
\title{Index fitting windows}
\usage{
make_window(time, ts, endpoints)

make_wave(window, ts)
}
\arguments{
\item{time}{A Date vector listing time points from one or more time series
in long format. Must be increasing in each level of \code{ts}.
Missing values are an error.}

\item{ts}{A factor of length \code{length(time)} such that \code{split(time, ts)}
splits \code{time} by time series. Missing values are an error.}

\item{endpoints}{A data frame with variables \code{ts} (factor), \code{start} (Date), and
\code{end} (Date) and one row per fitting window. Window \code{i} runs
from time \code{start[i]} to time \code{end[i]} in time series \code{ts[i]}.
Intervals \verb{[start[i], end[i]]} not containing at least two
time points in time series \code{ts[i]} are an error.}

\item{window}{A factor returned by \code{make_window(time, ts, endpoints)}.}
}
\value{
A factor of length \code{length(time)}. For \code{make_window()}, there are
as many levels as windows. For \code{make_wave()}, the number of levels
is equal to the maximum number of windows found in one time series.
}
\description{
Constructs a factor suitable for \code{\link[=egf]{egf()}} argument \code{window}
from a data frame listing fitting window endpoints.
}
\details{
\code{make_window(time, ts, endpoints)} constructs a factor \code{window}
such that \code{split(time, window)} splits the time points in \code{time}
by fitting window.

\code{make_wave(window, ts)} recodes \code{window}, assigning level \code{i}
to the \code{i}th window in all time series. The resulting factor
is useful if windows within time series correspond to epidemic
waves and one wants to include epidemic wave as a variable in
a mixed effects model.
}
\examples{
time <- rep(.Date(0:99), 4L)
ts <- gl(4L, 100L, labels = letters[1:4])
endpoints <- data.frame(
  ts    = gl(4L, 2L, labels = letters[1:4]),
  start = rep(time[c(21L, 61L)], 4L),
  end   = rep(time[c(40L, 80L)], 4L)
)

window <- make_window(time, ts, endpoints)
ww <- data.frame(time, ts, window, wave = make_wave(window, ts))

}
